// 랜덤한 숫자 뽑아내는 명령어(random())
Math.random()
0.8335161912508915

// 자릿수를 옮긴 후 그 아래 나머지 수 버리는 명령어(floor())
Math.floor(Math.random() * 1000000)
928865

// 숫자열을 문자열로 변환하는 명령어(String())
String(Math.floor(Math.random() * 1000000))
'846819'

// 첫 번째 자리의 숫자가 0일 경우 생략되는 경우를 방지하기 위한 명령어
// padStart의 괄호 안의 첫 번째 숫자의 의미는 랜덤으로 뽑아지는 숫자의 자리 수를 의미한다.
// 두 번째 들어가는 것의 의미는 공란에 채우고 싶은 문자나 숫자를 넣어 준다.
// padStart를 사용하기 위해서는 앞서 문자열로 변환해주어야 한다.
String(Math.floor(Math.random() * 1000000)).padStart(6, "0")
'074872'

// 실무에서는 주로 핸드폰 인증번호나 token으로 변수를 지정해 저장한다.
const token = String(Math.floor(Math.random() * 1000000)).padStart(6, "0")
// undefined

// 출력 예시
token
'224763'

// 함수
// 사용자들에게 알맞은 기능을 그룹으로 만들어서 제공하는 방법
// 매법 새롭게 작동하는 기능 단위
// 기능을 만들어서 변수/상수에 담아서 사용할 수 있다.(표현식)
// function 대신에 화살표(=>)로 대체해서 사용할 수 있다.(화살표함수) - 이 방법을 가장 많이 사용한다.

// API
// 랜더링 : 해석해서 그려준다.

// setTimeout(기능, 밀리초) - 시간지연함수, 해당 시간이 지난 후 한번 실행된다.
// setInterval(기능, 밀리초) - 시간반복함수, 시간마다 실행됨
// timer 기능등에서 사용된다.